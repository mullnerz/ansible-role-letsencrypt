---
# defaults file for ansible-role-letsencrypt

  letsencrypt_install_method: package_os
  # letsencrypt_install_method: package_pip

  letsencrypt_cert_domains:
    - "{{ inventory_hostname }}"
    - "{{ ansible_fqdn }}"

  letsencrypt_authenticator: webroot
  # letsencrypt_authenticator: standalone
  letsencrypt_webroot_path: /var/www/html
  letsencrypt_webroot_service: apache2
  #letsencrypt_webroot_service: nginx
  letsencrypt_deploy_service: "{{ letsencrypt_webroot_service }}"
  letsencrypt_deploy_service_restart: false
  
  letsencrypt_email: "webmaster@{{ ansible_domain }}"

  letsencrypt_use_staging: false
  letsencrypt_force_renewal: false

  letsencrypt_cert_name: "{{ letsencrypt_cert_domains[0] | default('') }}"
  letsencrypt_expand_cert: true
  #letsencrypt_cert_name_suffix:

  letsencrypt_rsa_key_size: 2048
  letsencrypt_must_staple: false

  letsencrypt_cert_command: >-
    certbot certonly --non-interactive --agree-tos
    {% if letsencrypt_rsa_key_size is defined %}--rsa-key-size {{ letsencrypt_rsa_key_size }}{% endif %}
    {% if letsencrypt_must_staple %}--must-staple{% endif %}
    {% if letsencrypt_authenticator == "webroot" %}--webroot --webroot-path {{ letsencrypt_webroot_path }}{% endif %}
    {% if letsencrypt_authenticator == "standalone" %}--standalone{% endif %}
    {% for domain in letsencrypt_cert_domains %}--domain {{ domain }} {% endfor %}
    {% if letsencrypt_cert_name | length %}--cert-name {{ letsencrypt_cert_name }}{% if letsencrypt_cert_name_suffix is defined %}-{{ letsencrypt_cert_name_suffix }}{% endif %}{% endif %}
    {% if letsencrypt_force_renewal %}--force-renewal{% endif %}
    {% if letsencrypt_expand_cert %}--expand{% endif %}
    {% if letsencrypt_use_staging %}--test-cert{% endif %}
    {% if letsencrypt_email is defined %}--email {{ letsencrypt_email }}{% endif %}
    {% if letsencrypt_authenticator == "webroot" %}--deploy-hook "service {{ letsencrypt_deploy_service }} {{ letsencrypt_deploy_service_restart | ternary('restart', 'force-reload') }}"{% endif %}

  letsencrypt_renewal_setup_cronjob: "{{ letsencrypt_install_method != 'package_os' }}"
  
  letsencrypt_renewal_command: >-
    sleep $(((RANDOM \% 600) + 1))s &&
    certbot renew --quiet
  
  letsencrypt_renewal_frequency:
    day: "*"
    hour: 2
    minute: 0
